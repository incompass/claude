import os
import requests
import threading
from database import get_order_details, get_user_info, get_welcome_message_id, clear_welcome_message_id

def send_telegram_notification(user_id: int, order_number: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ Telegram API"""
    try:
        bot_token = os.environ.get('BOT_TOKEN')
        if not bot_token:
            print("Bot token not found")
            return
        
        admin_id = 7059439474
        web_app_url = 'https://hukah-pashq.amvera.io'
        
        order = get_order_details(user_id, order_number)
        user_info = get_user_info(user_id)
        
        if not order or not user_info:
            print(f"Order {order_number} or user {user_id} not found")
            return
        
        admin_message = f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        admin_message += f"üë§ <b>–û—Ç:</b> {user_info['last_name']} {user_info['first_name']}"
        if user_info['middle_name']:
            admin_message += f" {user_info['middle_name']}"
        admin_message += f"\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_info['phone']}"
        admin_message += f"\nüÜî <b>Telegram ID:</b> {user_id}"
        if user_info['username']:
            admin_message += f" (@{user_info['username']})"
        admin_message += f"\n\nüìã <b>–ó–∞–∫–∞–∑ #{order['order_number']}</b>"
        admin_message += f"\nüìÖ <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order['delivery_date']} –≤ {order['delivery_time']}"
        admin_message += f"\nüìç <b>–ê–¥—Ä–µ—Å:</b> {order['address']}"
        admin_message += f"\n‚è∞ <b>–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {order['rental_days']} –¥–Ω."
        admin_message += f"\nüí∞ <b>–°—É–º–º–∞:</b> {order['total_price']}‚ÇΩ"
        
        admin_message += f"\n\nüé≠ <b>–ö–∞–ª—å—è–Ω—ã:</b>"
        for hookah in order['hookahs']:
            admin_message += f"\n‚Ä¢ {hookah['name']} - {hookah['tariff']}"
            if hookah['fruit_bowl']:
                admin_message += f" + {hookah['fruit_bowl']}"
        
        if order['drinks']:
            admin_message += f"\n\nü•§ <b>–ù–∞–ø–∏—Ç–∫–∏:</b>"
            for drink in order['drinks']:
                admin_message += f"\n‚Ä¢ {drink['name']} √ó {drink['quantity']}"
        
        if order['preparation_service']:
            admin_message += f"\n\n‚ú® –ü—Ä–∏–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–ª—å—è–Ω–∞: +290‚ÇΩ"
        
        if order['additional_tobacco'] > 0:
            admin_message += f"\nüçÉ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫: {order['additional_tobacco']} –ø–∞—á–µ–∫ (+{order['additional_tobacco'] * 350}‚ÇΩ)"
        
        # –°–æ–∑–¥–∞–µ–º inline keyboard
        admin_webapp_url = f"{web_app_url}/{user_id}/{order_number}/adm"
        contact_url = f"tg://openmessage?user_id={user_id}"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", "web_app": {"url": admin_webapp_url}}],
                [{"text": "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", "url": contact_url}]
            ]
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            "chat_id": admin_id,
            "text": admin_message,
            "parse_mode": "HTML",
            "reply_markup": keyboard
        }
        
        response = requests.post(url, json=data, timeout=10)
        if response.status_code == 200:
            print(f"Order notification sent to admin for order {order_number}")
        else:
            print(f"Failed to send notification: {response.text}")
            
    except Exception as e:
        print(f"Error sending order notification: {e}")

def send_notification_async(user_id: int, order_number: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    thread = threading.Thread(target=send_telegram_notification, args=(user_id, order_number))
    thread.daemon = True
    thread.start()

def send_registration_success(telegram_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print(f"=== STARTING REGISTRATION SUCCESS FOR USER {telegram_id} ===")
    try:
        bot_token = os.environ.get('BOT_TOKEN')
        if not bot_token:
            print("Bot token not found")
            return
        
        web_app_url = 'https://hukah-pashq.amvera.io'
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message_id = get_welcome_message_id(telegram_id)
        print(f"Attempting to handle welcome message for user {telegram_id}, message_id: {welcome_message_id}")
        
        message_handled = False
        
        if welcome_message_id:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            delete_url = f"https://api.telegram.org/bot{bot_token}/deleteMessage"
            delete_data = {
                "chat_id": telegram_id,
                "message_id": welcome_message_id
            }
            
            try:
                print(f"Sending delete request to: {delete_url}")
                print(f"Delete data: {delete_data}")
                delete_response = requests.post(delete_url, json=delete_data, timeout=10)
                print(f"Delete response status: {delete_response.status_code}")
                print(f"Delete response text: {delete_response.text}")
                
                if delete_response.status_code == 200:
                    print(f"Welcome message {welcome_message_id} deleted for user {telegram_id}")
                    clear_welcome_message_id(telegram_id)
                    message_handled = True
                else:
                    print(f"Failed to delete welcome message: {delete_response.text}")
                    # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    edit_url = f"https://api.telegram.org/bot{bot_token}/editMessageText"
                    edit_data = {
                        "chat_id": telegram_id,
                        "message_id": welcome_message_id,
                        "text": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                        "reply_markup": {"inline_keyboard": []}
                    }
                    
                    print(f"Sending edit request to: {edit_url}")
                    print(f"Edit data: {edit_data}")
                    edit_response = requests.post(edit_url, json=edit_data, timeout=10)
                    print(f"Edit response status: {edit_response.status_code}")
                    print(f"Edit response text: {edit_response.text}")
                    
                    if edit_response.status_code == 200:
                        print(f"Welcome message {welcome_message_id} edited for user {telegram_id}")
                        clear_welcome_message_id(telegram_id)
                        message_handled = True
                    else:
                        print(f"Failed to edit welcome message: {edit_response.text}")
                        
            except Exception as e:
                print(f"Error handling welcome message: {e}")
        else:
            print(f"No welcome message ID found for user {telegram_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ
        if not message_handled:
            message = f"""
‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–∞ –∫–∞–ª—å—è–Ω–æ–≤:
‚Ä¢ üé≠ –í—ã–±–∏—Ä–∞—Ç—å –∫–∞–ª—å—è–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏
‚Ä¢ ü•§ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–∞–ø–∏—Ç–∫–∏
‚Ä¢ ‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ä¢ üõí –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã
‚Ä¢ üìç –£–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥—Ä–µ—Å–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–ª—å—è–Ω–æ–≤! üî•
"""
            
            keyboard = {
                "inline_keyboard": [
                    [
                        {
                            "text": "üé≠ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥",
                            "web_app": {"url": f"{web_app_url}/{telegram_id}"}
                        }
                    ]
                ]
            }
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": telegram_id,
                "text": message,
                "reply_markup": keyboard,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, json=data, timeout=10)
            if response.status_code == 200:
                print(f"Registration success notification sent to {telegram_id}")
            else:
                print(f"Failed to send registration notification: {response.text}")
        else:
            print(f"Welcome message was handled successfully, no need to send additional message")
            
    except Exception as e:
        print(f"Error sending registration notification: {e}")

def send_registration_success_async(telegram_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    print(f"=== TRIGGERING ASYNC REGISTRATION SUCCESS FOR USER {telegram_id} ===")
    thread = threading.Thread(target=send_registration_success, args=(telegram_id,))
    thread.daemon = True
    thread.start()
    print(f"=== ASYNC THREAD STARTED FOR USER {telegram_id} ===") 