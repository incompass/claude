import asyncio
import logging
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TimedOut, NetworkError, RetryAfter
from database import init_database, get_user_info, get_order_details
from config import setup_logging
import time
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
WEB_APP_URL = os.environ.get('WEB_APP_URL', 'https://hukah-pashq.amvera.io')
ADMIN_ID = int(os.environ.get('ADMIN_ID', '5720640497'))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
welcome_messages = {}

async def retry_request(func, max_retries=3, delay=5):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    for attempt in range(max_retries):
        try:
            return await func()
        except (TimedOut, NetworkError) as e:
            if attempt == max_retries - 1:
                raise e
            wait_time = delay * (2 ** attempt)
            logger.warning(f"Request failed (attempt {attempt + 1}/{max_retries}): {e}. Retrying in {wait_time}s...")
            await asyncio.sleep(wait_time)
        except RetryAfter as e:
            logger.warning(f"Rate limited. Waiting {e.retry_after}s...")
            await asyncio.sleep(e.retry_after)
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            raise e

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    logger.info(f"User {user_id} started the bot")
    
    try:
        response = requests.get(f"{WEB_APP_URL}/{user_id}/info", timeout=30)
        user_registered = response.status_code == 200
    except Exception as e:
        logger.error(f"Error checking user info: {e}")
        user_registered = False
    
    if user_registered:
        webapp_url = f"{WEB_APP_URL}/{user_id}"
        message = f"üé≠ {user.first_name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        message += "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∫–∞–ª—å—è–Ω–æ–≤:"
        
        keyboard = [[
            InlineKeyboardButton(
                "üî• –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥",
                web_app=WebAppInfo(url=webapp_url)
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        async def send_reply():
            return await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
        
        await retry_request(send_reply)
    else:
        registration_url = f"{WEB_APP_URL}/{user_id}/reg"
        message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
        message += "üìù –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        
        keyboard = [[
            InlineKeyboardButton(
                "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                web_app=WebAppInfo(url=registration_url)
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        async def send_message():
            return await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
        
        sent_message = await retry_request(send_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        welcome_messages[user_id] = sent_message.message_id
        logger.info(f"Saved welcome message ID {sent_message.message_id} for user {user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
        try:
            logger.info(f"Attempting to save welcome message ID {sent_message.message_id} for user {user_id}")
            response = requests.post(f"{WEB_APP_URL}/{user_id}/save_welcome_message", 
                         json={'message_id': sent_message.message_id}, 
                         timeout=5)
            if response.status_code == 200:
                logger.info(f"Welcome message ID saved to database for user {user_id}")
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                check_response = requests.get(f"{WEB_APP_URL}/{user_id}/get_welcome_message", timeout=5)
                if check_response.status_code == 200:
                    saved_data = check_response.json()
                    logger.info(f"Verification: saved welcome message ID is {saved_data.get('message_id')}")
                else:
                    logger.error(f"Failed to verify saved welcome message ID: {check_response.status_code}")
            else:
                logger.error(f"Failed to save welcome message ID: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"Error saving welcome message ID: {e}")

async def handle_order_notification(user_id: int, order_number: int, bot_token: str):
    try:
        order = get_order_details(user_id, order_number)
        user_info = get_user_info(user_id)
        
        if not order or not user_info:
            logger.error(f"Order {order_number} or user {user_id} not found")
            return
        
        admin_message = f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        admin_message += f"üë§ <b>–û—Ç:</b> {user_info['last_name']} {user_info['first_name']}"
        if user_info['middle_name']:
            admin_message += f" {user_info['middle_name']}"
        admin_message += f"\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_info['phone']}"
        admin_message += f"\nüÜî <b>Telegram ID:</b> {user_id}"
        if user_info['username']:
            admin_message += f" (@{user_info['username']})"
        admin_message += f"\n\nüìã <b>–ó–∞–∫–∞–∑ #{order['order_number']}</b>"
        admin_message += f"\nüìÖ <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order['delivery_date']} –≤ {order['delivery_time']}"
        admin_message += f"\nüìç <b>–ê–¥—Ä–µ—Å:</b> {order['address']}"
        admin_message += f"\n‚è∞ <b>–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {order['rental_days']} –¥–Ω."
        admin_message += f"\nüí∞ <b>–°—É–º–º–∞:</b> {order['total_price']}‚ÇΩ"
        
        admin_message += f"\n\nüé≠ <b>–ö–∞–ª—å—è–Ω—ã:</b>"
        for hookah in order['hookahs']:
            admin_message += f"\n‚Ä¢ {hookah['name']} - {hookah['tariff']}"
            if hookah['fruit_bowl']:
                admin_message += f" + {hookah['fruit_bowl']}"
        
        if order['drinks']:
            admin_message += f"\n\nü•§ <b>–ù–∞–ø–∏—Ç–∫–∏:</b>"
            for drink in order['drinks']:
                admin_message += f"\n‚Ä¢ {drink['name']} √ó {drink['quantity']}"
        
        if order['preparation_service']:
            admin_message += f"\n\n‚ú® –ü—Ä–∏–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–ª—å—è–Ω–∞: +290‚ÇΩ"
        
        if order['additional_tobacco'] > 0:
            admin_message += f"\nüçÉ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫: {order['additional_tobacco']} –ø–∞—á–µ–∫ (+{order['additional_tobacco'] * 350}‚ÇΩ)"
        
        admin_webapp_url = f"{WEB_APP_URL}/{user_id}/{order_number}/adm"
        contact_url = f"tg://openmessage?user_id={user_id}"
        
        keyboard = [
            [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", web_app=WebAppInfo(url=admin_webapp_url))],
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=contact_url)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        from telegram import Bot
        bot = Bot(token=bot_token)
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
        logger.info(f"Order notification sent to admin for order {order_number}")
        
    except Exception as e:
        logger.error(f"Error sending order notification: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if update.message.text == "/start":
        return
    
    try:
        response = requests.get(f"{WEB_APP_URL}/{user_id}/info", timeout=10)
        user_registered = response.status_code == 200
    except Exception as e:
        logger.error(f"Error checking user info: {e}")
        user_registered = False
    
    if user_registered:
        webapp_url = f"{WEB_APP_URL}/{user_id}"
        message = "üé≠ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∫–∞–ª—å—è–Ω–æ–≤:"
        
        keyboard = [[
            InlineKeyboardButton(
                "üî• –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–ª—å—è–Ω–æ–≤",
                web_app=WebAppInfo(url=webapp_url)
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        async def send_reply():
            return await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
        
        await retry_request(send_reply)
    else:
        registration_url = f"{WEB_APP_URL}/{user_id}/reg"
        message = "üìù –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
        
        keyboard = [[
            InlineKeyboardButton(
                "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                web_app=WebAppInfo(url=registration_url)
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        async def send_reply():
            return await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
        
        await retry_request(send_reply)

async def webhook_handler(request_data):
    try:
        if 'order_created' in request_data:
            user_id = request_data['user_id']
            order_number = request_data['order_number']
            
            application = Application.builder().token(BOT_TOKEN).build()
            await handle_order_notification(user_id, order_number, application)
            
    except Exception as e:
        logger.error(f"Error in webhook handler: {e}")

def get_welcome_message_id(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return welcome_messages.get(user_id)

def remove_welcome_message_id(user_id):
    """–£–¥–∞–ª–∏—Ç—å ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in welcome_messages:
        del welcome_messages[user_id]

def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables")
        return
    
    init_database()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    from telegram.request import HTTPXRequest
    request = HTTPXRequest(
        connect_timeout=30,
        read_timeout=30,
        write_timeout=30
    )
    
    application = Application.builder().token(BOT_TOKEN).request(request).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("Bot started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    max_retries = 5
    for attempt in range(max_retries):
        try:
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            break
        except (TimedOut, NetworkError) as e:
            if attempt == max_retries - 1:
                logger.error(f"Failed to start bot after {max_retries} attempts: {e}")
                raise e
            wait_time = 10 * (2 ** attempt)
            logger.warning(f"Bot startup failed (attempt {attempt + 1}/{max_retries}): {e}. Retrying in {wait_time}s...")
            time.sleep(wait_time)
        except Exception as e:
            logger.error(f"Unexpected error starting bot: {e}")
            raise e

if __name__ == '__main__':
    main() 